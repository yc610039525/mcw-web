package com._36wu;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 3.0.12
 * 2017-04-02T23:45:29.727+08:00
 * Generated source version: 3.0.12
 * 
 */
@WebServiceClient(name = "WeatherService", 
                  wsdlLocation = "http://web.36wu.com/WeatherService.asmx?WSDL",
                  targetNamespace = "http://www.36wu.com/") 
public class WeatherService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.36wu.com/", "WeatherService");
    public final static QName WeatherServiceSoap12 = new QName("http://www.36wu.com/", "WeatherServiceSoap12");
    public final static QName WeatherServiceSoap = new QName("http://www.36wu.com/", "WeatherServiceSoap");
    public final static QName WeatherServiceHttpPost = new QName("http://www.36wu.com/", "WeatherServiceHttpPost");
    public final static QName WeatherServiceHttpGet = new QName("http://www.36wu.com/", "WeatherServiceHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://web.36wu.com/WeatherService.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WeatherService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://web.36wu.com/WeatherService.asmx?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public WeatherService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WeatherService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WeatherService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns WeatherServiceSoap
     */
    @WebEndpoint(name = "WeatherServiceSoap12")
    public WeatherServiceSoap getWeatherServiceSoap12() {
        return super.getPort(WeatherServiceSoap12, WeatherServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherServiceSoap
     */
    @WebEndpoint(name = "WeatherServiceSoap12")
    public WeatherServiceSoap getWeatherServiceSoap12(WebServiceFeature... features) {
        return super.getPort(WeatherServiceSoap12, WeatherServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns WeatherServiceSoap
     */
    @WebEndpoint(name = "WeatherServiceSoap")
    public WeatherServiceSoap getWeatherServiceSoap() {
        return super.getPort(WeatherServiceSoap, WeatherServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherServiceSoap
     */
    @WebEndpoint(name = "WeatherServiceSoap")
    public WeatherServiceSoap getWeatherServiceSoap(WebServiceFeature... features) {
        return super.getPort(WeatherServiceSoap, WeatherServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns WeatherServiceHttpPost
     */
    @WebEndpoint(name = "WeatherServiceHttpPost")
    public WeatherServiceHttpPost getWeatherServiceHttpPost() {
        return super.getPort(WeatherServiceHttpPost, WeatherServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherServiceHttpPost
     */
    @WebEndpoint(name = "WeatherServiceHttpPost")
    public WeatherServiceHttpPost getWeatherServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(WeatherServiceHttpPost, WeatherServiceHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns WeatherServiceHttpGet
     */
    @WebEndpoint(name = "WeatherServiceHttpGet")
    public WeatherServiceHttpGet getWeatherServiceHttpGet() {
        return super.getPort(WeatherServiceHttpGet, WeatherServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WeatherServiceHttpGet
     */
    @WebEndpoint(name = "WeatherServiceHttpGet")
    public WeatherServiceHttpGet getWeatherServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(WeatherServiceHttpGet, WeatherServiceHttpGet.class, features);
    }

}
