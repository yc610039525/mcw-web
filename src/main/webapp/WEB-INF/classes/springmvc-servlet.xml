<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xmlns:p="http://www.springframework.org/schema/p"   
        xmlns:context="http://www.springframework.org/schema/context"   
        xmlns:mvc="http://www.springframework.org/schema/mvc"  
        xsi:schemaLocation="http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/context   
            http://www.springframework.org/schema/context/spring-context.xsd 
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc.xsd"> 
            
    <!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 
    <mvc:annotation-driven/>会自动注册DefaultAnnotationHandlerMapping与
    AnnotationMethodHandlerAdapter两个bean,是spring MVC为@Controllers分发请求所必须的。
	并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，
	@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。
	后面，我们处理响应ajax请求时，就使用到了对json的支持。
          使用了该驱动注册就无法定义下面interceptors属性
    -->
    
    <!-- 启动Spring MVC的注解功能 完成请求和注解POJO的映射， 配置一个基于注解    
                的定制的WebBindingInitializer 解决日期转换问题 方法级别的处理器映射 --> 
                 
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
    p:prefix="/" p:suffix=".jsp" />
    
    
    
    <!-- 配置资源文件 防止被拦截  <mvc:resources location="/WEB-INF/view/js/" mapping="/js/**"/> -->  
    <mvc:interceptors>  
        <mvc:interceptor> 
            <mvc:mapping path="/*.do" />  
            <mvc:mapping path="/*.ajax" />  
            <mvc:mapping path="/*.jsp" />  
            <mvc:mapping path="/*.html" />  
  
            <mvc:mapping path="/*/*.do" />  
            <mvc:mapping path="/*/*.ajax" />  
            <mvc:mapping path="/*/*.jsp" />  
            <mvc:mapping path="/*/*.html" />  
  
            <mvc:exclude-mapping path="index.jsp" /> 
            <mvc:exclude-mapping path="/login.html" />
            <mvc:exclude-mapping path="/checkcode.do" /> 
            <mvc:exclude-mapping path="/getUserInfo.do" /> 
            <mvc:exclude-mapping path="/webService/getWeather.do" /> 
            <bean class="com.cnblog.yc610039525.userinterceptor.UserSecurityInterceptor"/>  
        </mvc:interceptor>  
    </mvc:interceptors>
     
    <!-- 也可以在web.xml中配置静态资源访问 -->
    <!--  <mvc:resources mapping="/images/**" location="/images/" />   -->

	<!--  启用spring mvc 属性注解
               向Spring 容器注册===== "context:annotation-config"
      AutowiredAnnotationBeanPostProcessor、
      CommonAnnotationBeanPostProcessor、
      PersistenceAnnotationBeanPostProcessor 
      RequiredAnnotationBeanPostProcessor 
               这4个BeanPostProcessor
               设置使用注解的类所在的类名注解  以及 包含 config注解功能
    @Controller 声明Action组件
	@Service    声明Service组件    @Service("myMovieLister") 
	@Repository 声明Dao组件
	@Component   泛指组件, 当不好归类时. 
	@RequestMapping("/menu")  请求映射
	@Resource  用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName") 
	@Autowired 用于注入，(srping提供的) 默认按类型装配 
	@Transactional( rollbackFor={Exception.class}) 事务管理
	@ResponseBody
	@Scope("prototype")   设定bean的作用域
    -->
     <context:component-scan base-package="com.cnblog"/>

</beans>