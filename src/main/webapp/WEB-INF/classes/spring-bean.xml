<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:context="http://www.springframework.org/schema/context"   
        xsi:schemaLocation="http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/context   
            http://www.springframework.org/schema/context/spring-context.xsd"
                        > 
            
            <!-- 小试牛刀 property使用 name,value-->
            <bean id="personService" class="com.cnblog.yc610039525.spring.PersonService">
              <property name="name" value="wawa"></property>
            </bean>
            
            <!-- 
               property使用 name,ref,ref也是一个bean的id,ref 
                                     可以在stoneAxe和steelAxe之间随意切换,而不用修改java代码 
            -->
            <bean id="chinese" class="com.cnblog.yc610039525.ioc.setter.Chinese">
              <property name="axe" ref="steelAxe"></property>
            </bean>
            <bean id="stoneAxe" class="com.cnblog.yc610039525.ioc.setter.StoneAxe" /> 
            <bean id="steelAxe" class="com.cnblog.yc610039525.ioc.setter.SteelAxe" /> 
            
            <!-- 
                                          构造注入
                constructor-arg标签,ref ,
                ref也是一个bean的id,ref 可以在stoneAxe和steelAxe之间随意切换,而不用修改java代码
                constructor-arg 也可以配置value,表示传递给构造函数的是一个 普通的值,而不是另一个bean 
            -->
            <bean id="chinese1" class="com.cnblog.yc610039525.ioc.constructor.Chinese">
              <constructor-arg ref="steelAxe" /> 
            </bean>
            
            <!-- 国际化 -->
           <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
              <property name="basenames" >
                <list>
                  <!-- 这里的value可带路径   -->
                  <value>message</value>
                </list>
              </property> 
            </bean>
            
            <!-- 
              ApplicationContext的事件机制 
                在Spring中配置了实现ApplicationListener接口的Bean,
              Spring容器就会把这个Bean当成容器事件的监听器
            -->
            <bean class="com.cnblog.yc610039525.springevent.EmainNotifier" /> 
            
            <!-- bean中获取 ApplicationContext引用-->
            <bean name="beangetappcontext" class="com.cnblog.yc610039525.bean.get.appcontext.BeanGetAppContext" />
            
            <!-- AOP测试的chinese -->
            <bean id="chinese_aop" class="com.cnblog.yc610039525.aop.Chinese" />
            <!-- 定义一个普通bean,作为切面bean  切面（Aspect） -->
            <bean id="accessArgAspect" class="com.cnblog.yc610039525.aop.aspect.AccessArgAspect" />
            
            
            
            <!-- AOP配置  --> 
            <aop:config>
              <aop:aspect id="aspect" ref="accessArgAspect">
                <aop:after-returning 
                  pointcut="execution(* com.cnblog.yc610039525.aop.*.*(..)) and args(food,time,..)" 
                  method="access"
                  returning="retval"
                  arg-names="time,food,retval" 
                />
                <!-- 切入点（Pointcut） -->
                <aop:before 
                  pointcut="execution(* com.cnblog.yc610039525.aop.*.*(..)) and args(food,time,..)" 
                  method="accessWithJoinPoint"
                />
                
              </aop:aspect> 
            </aop:config>
            <!-- 启用Spring对@AspectJ的支持 -->
           <aop:aspectj-autoproxy proxy-target-class="true"/>
           <bean  class="com.cnblog.yc610039525.aop.aspect.NotVeryUsefulAspect" />
     <!-- 
		在 Spring 中读取properties属性，以及环境变量 系统属性
	 -->
	 <bean id="configurerHelper"
		   class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		    <property name="locations">
		        <list>
		            <value>classpath*:*.properties</value>
		        </list>
		    </property>
	 </bean>
     
     <bean id="SysConfigHelper" class="com.cnblog.yc610039525.sys.SysConfigHelper">
    	<property name="PROP" value="${CATALINA_HOME}">
    	</property>
     </bean>
            
</beans> 